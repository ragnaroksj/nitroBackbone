var vows=require("vows"),fs=require("fs"),assert=require("assert"),iconv=require(__dirname+"/../"),testString="中国abc",testStringGBKBuffer=new Buffer([214,208,185,250,97,98,99]);vows.describe("GBK tests").addBatch({"Vows is working":function(){},"Return values are of correct types":function(){assert.ok(iconv.toEncoding(testString,"utf8")instanceof Buffer);var e=iconv.fromEncoding(new Buffer(testString),"utf8");assert.strictEqual(Object.prototype.toString.call(e),"[object String]")},"GBK correctly encoded/decoded":function(){assert.strictEqual(iconv.toEncoding(testString,"GBK").toString("binary"),testStringGBKBuffer.toString("binary"));assert.strictEqual(iconv.fromEncoding(testStringGBKBuffer,"GBK"),testString)},"GB2312 correctly encoded/decoded":function(){assert.strictEqual(iconv.toEncoding(testString,"GB2312").toString("binary"),testStringGBKBuffer.toString("binary"));assert.strictEqual(iconv.fromEncoding(testStringGBKBuffer,"GB2312"),testString)},"GBK file read decoded,compare with iconv result":function(){var e=fs.readFileSync(__dirname+"/gbkFile.txt"),t=iconv.fromEncoding(e,"GBK"),n=new(require("iconv").Iconv)("GBK","utf8");assert.strictEqual(n.convert(e).toString(),t)},"GBK correctly decodes and encodes characters · and ×":function(){var e="·×",t=new Buffer([161,164,161,193]);assert.strictEqual(iconv.toEncoding(e,"GBK").toString("binary"),t.toString("binary"));assert.strictEqual(iconv.fromEncoding(t,"GBK"),e)}}).export(module);