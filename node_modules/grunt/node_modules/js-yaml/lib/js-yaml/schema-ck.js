"use strict";function compileList(e,t,n){var r=[];e.include.forEach(function(e){n=compileList(e,t,n)});e[t].forEach(function(e){n.forEach(function(t,n){t.tag===e.tag&&r.push(n)});n.push(e)});return n.filter(function(e,t){return-1===r.indexOf(t)})}function compileMap(){function r(t){e[t.tag]=t}var e={},t,n;for(t=0,n=arguments.length;t<n;t+=1)arguments[t].forEach(r);return e}function Schema(e){this.include=e.include||[];this.implicit=e.implicit||[];this.explicit=e.explicit||[];this.implicit.forEach(function(e){if(null!==e.loader&&"string"!==e.loader.kind)throw new YAMLException("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.")});this.compiledImplicit=compileList(this,"implicit",[]);this.compiledExplicit=compileList(this,"explicit",[]);this.compiledTypeMap=compileMap(this.compiledImplicit,this.compiledExplicit)}var common=require("./common"),YAMLException=require("./exception"),Type=require("./type");Schema.DEFAULT=null;Schema.create=function(){var t,n;switch(arguments.length){case 1:t=Schema.DEFAULT;n=arguments[0];break;case 2:t=arguments[0];n=arguments[1];break;default:throw new YAMLException("Wrong number of arguments for Schema.create function")}t=common.toArray(t);n=common.toArray(n);if(!t.every(function(e){return e instanceof Schema}))throw new YAMLException("Specified list of super schemas (or a single Schema object) contains a non-Schema object.");if(!n.every(function(e){return e instanceof Type}))throw new YAMLException("Specified list of YAML types (or a single Type object) contains a non-Type object.");return new Schema({include:t,explicit:n})};module.exports=Schema;