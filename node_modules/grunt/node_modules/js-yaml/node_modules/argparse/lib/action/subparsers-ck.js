/** internal
 * class ActionSubparsers
 *
 * Support the creation of such sub-commands with the addSubparsers()
 *
 * This class inherited from [[Action]]
 **/"use strict";var util=require("util"),format=require("util").format,_=require("underscore"),Action=require("../action"),$$=require("../const"),argumentErrorHelper=require("../argument/error"),ChoicesPseudoAction=function(e,t){var n={optionStrings:[],dest:e,help:t};Action.call(this,n)};util.inherits(ChoicesPseudoAction,Action);var ActionSubparsers=module.exports=function(t){t=t||{};t.dest=t.dest||$$.SUPPRESS;t.nargs=$$.PARSER;this.debug=t.debug===!0;this._progPrefix=t.prog;this._parserClass=t.parserClass;this._nameParserMap={};this._choicesActions=[];t.choices=this._nameParserMap;Action.call(this,t)};util.inherits(ActionSubparsers,Action);ActionSubparsers.prototype.addParser=function(e,t){var n,r=this;t=t||{};t.debug=this.debug===!0;t.prog||(t.prog=this._progPrefix+" "+e);var i=t.aliases||[];if(!!t.help||_.isString(t.help)){var s=t.help;delete t.help;var o=new ChoicesPseudoAction(e,s);this._choicesActions.push(o)}n=new this._parserClass(t);this._nameParserMap[e]=n;i.forEach(function(e){r._nameParserMap[e]=n});return n};ActionSubparsers.prototype._getSubactions=function(){return this._choicesActions};ActionSubparsers.prototype.call=function(e,t,n){var r=n[0],i=n.slice(1);this.dest!==$$.SUPPRESS&&(t[this.dest]=r);if(!this._nameParserMap[r])throw argumentErrorHelper(format('Unknown parser "%s" (choices: [%s]).',r,_.keys(this._nameParserMap).join(", ")));e=this._nameParserMap[r];e.parseArgs(i,t)};