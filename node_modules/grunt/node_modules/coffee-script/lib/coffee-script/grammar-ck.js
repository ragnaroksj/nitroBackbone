// Generated by CoffeeScript 1.3.3
(function(){var e,t,n,r,i,s,o,u,a,f;e=require("jison").Parser;f=/^function\s*\(\)\s*\{\s*return\s*([\s\S]*);\s*\}/;s=function(e,t,n){var r;e=e.replace(/\s{2,}/g," ");if(!t)return[e,"$$ = $1;",n];t=(r=f.exec(t))?r[1]:"("+t+"())";t=t.replace(/\bnew /g,"$&yy.");t=t.replace(/\b(?:Block\.wrap|extend)\b/g,"yy.$&");return[e,"$$ = "+t+";",n]};r={Root:[s("",function(){return new Block}),s("Body"),s("Block TERMINATOR")],Body:[s("Line",function(){return Block.wrap([$1])}),s("Body TERMINATOR Line",function(){return $1.push($3)}),s("Body TERMINATOR")],Line:[s("Expression"),s("Statement")],Statement:[s("Return"),s("Comment"),s("STATEMENT",function(){return new Literal($1)})],Expression:[s("Value"),s("Invocation"),s("Code"),s("Operation"),s("Assign"),s("If"),s("Try"),s("While"),s("For"),s("Switch"),s("Class"),s("Throw")],Block:[s("INDENT OUTDENT",function(){return new Block}),s("INDENT Body OUTDENT",function(){return $2})],Identifier:[s("IDENTIFIER",function(){return new Literal($1)})],AlphaNumeric:[s("NUMBER",function(){return new Literal($1)}),s("STRING",function(){return new Literal($1)})],Literal:[s("AlphaNumeric"),s("JS",function(){return new Literal($1)}),s("REGEX",function(){return new Literal($1)}),s("DEBUGGER",function(){return new Literal($1)}),s("UNDEFINED",function(){return new Undefined}),s("NULL",function(){return new Null}),s("BOOL",function(){return new Bool($1)})],Assign:[s("Assignable = Expression",function(){return new Assign($1,$3)}),s("Assignable = TERMINATOR Expression",function(){return new Assign($1,$4)}),s("Assignable = INDENT Expression OUTDENT",function(){return new Assign($1,$4)})],AssignObj:[s("ObjAssignable",function(){return new Value($1)}),s("ObjAssignable : Expression",function(){return new Assign(new Value($1),$3,"object")}),s("ObjAssignable :       INDENT Expression OUTDENT",function(){return new Assign(new Value($1),$4,"object")}),s("Comment")],ObjAssignable:[s("Identifier"),s("AlphaNumeric"),s("ThisProperty")],Return:[s("RETURN Expression",function(){return new Return($2)}),s("RETURN",function(){return new Return})],Comment:[s("HERECOMMENT",function(){return new Comment($1)})],Code:[s("PARAM_START ParamList PARAM_END FuncGlyph Block",function(){return new Code($2,$5,$4)}),s("FuncGlyph Block",function(){return new Code([],$2,$1)})],FuncGlyph:[s("->",function(){return"func"}),s("=>",function(){return"boundfunc"})],OptComma:[s(""),s(",")],ParamList:[s("",function(){return[]}),s("Param",function(){return[$1]}),s("ParamList , Param",function(){return $1.concat($3)}),s("ParamList OptComma TERMINATOR Param",function(){return $1.concat($4)}),s("ParamList OptComma INDENT ParamList OptComma OUTDENT",function(){return $1.concat($4)})],Param:[s("ParamVar",function(){return new Param($1)}),s("ParamVar ...",function(){return new Param($1,null,!0)}),s("ParamVar = Expression",function(){return new Param($1,$3)})],ParamVar:[s("Identifier"),s("ThisProperty"),s("Array"),s("Object")],Splat:[s("Expression ...",function(){return new Splat($1)})],SimpleAssignable:[s("Identifier",function(){return new Value($1)}),s("Value Accessor",function(){return $1.add($2)}),s("Invocation Accessor",function(){return new Value($1,[].concat($2))}),s("ThisProperty")],Assignable:[s("SimpleAssignable"),s("Array",function(){return new Value($1)}),s("Object",function(){return new Value($1)})],Value:[s("Assignable"),s("Literal",function(){return new Value($1)}),s("Parenthetical",function(){return new Value($1)}),s("Range",function(){return new Value($1)}),s("This")],Accessor:[s(".  Identifier",function(){return new Access($2)}),s("?. Identifier",function(){return new Access($2,"soak")}),s(":: Identifier",function(){return[new Access(new Literal("prototype")),new Access($2)]}),s("::",function(){return new Access(new Literal("prototype"))}),s("Index")],Index:[s("INDEX_START IndexValue INDEX_END",function(){return $2}),s("INDEX_SOAK  Index",function(){return extend($2,{soak:!0})})],IndexValue:[s("Expression",function(){return new Index($1)}),s("Slice",function(){return new Slice($1)})],Object:[s("{ AssignList OptComma }",function(){return new Obj($2,$1.generated)})],AssignList:[s("",function(){return[]}),s("AssignObj",function(){return[$1]}),s("AssignList , AssignObj",function(){return $1.concat($3)}),s("AssignList OptComma TERMINATOR AssignObj",function(){return $1.concat($4)}),s("AssignList OptComma INDENT AssignList OptComma OUTDENT",function(){return $1.concat($4)})],Class:[s("CLASS",function(){return new Class}),s("CLASS Block",function(){return new Class(null,null,$2)}),s("CLASS EXTENDS Expression",function(){return new Class(null,$3)}),s("CLASS EXTENDS Expression Block",function(){return new Class(null,$3,$4)}),s("CLASS SimpleAssignable",function(){return new Class($2)}),s("CLASS SimpleAssignable Block",function(){return new Class($2,null,$3)}),s("CLASS SimpleAssignable EXTENDS Expression",function(){return new Class($2,$4)}),s("CLASS SimpleAssignable EXTENDS Expression Block",function(){return new Class($2,$4,$5)})],Invocation:[s("Value OptFuncExist Arguments",function(){return new Call($1,$3,$2)}),s("Invocation OptFuncExist Arguments",function(){return new Call($1,$3,$2)}),s("SUPER",function(){return new Call("super",[new Splat(new Literal("arguments"))])}),s("SUPER Arguments",function(){return new Call("super",$2)})],OptFuncExist:[s("",function(){return!1}),s("FUNC_EXIST",function(){return!0})],Arguments:[s("CALL_START CALL_END",function(){return[]}),s("CALL_START ArgList OptComma CALL_END",function(){return $2})],This:[s("THIS",function(){return new Value(new Literal("this"))}),s("@",function(){return new Value(new Literal("this"))})],ThisProperty:[s("@ Identifier",function(){return new Value(new Literal("this"),[new Access($2)],"this")})],Array:[s("[ ]",function(){return new Arr([])}),s("[ ArgList OptComma ]",function(){return new Arr($2)})],RangeDots:[s("..",function(){return"inclusive"}),s("...",function(){return"exclusive"})],Range:[s("[ Expression RangeDots Expression ]",function(){return new Range($2,$4,$3)})],Slice:[s("Expression RangeDots Expression",function(){return new Range($1,$3,$2)}),s("Expression RangeDots",function(){return new Range($1,null,$2)}),s("RangeDots Expression",function(){return new Range(null,$2,$1)}),s("RangeDots",function(){return new Range(null,null,$1)})],ArgList:[s("Arg",function(){return[$1]}),s("ArgList , Arg",function(){return $1.concat($3)}),s("ArgList OptComma TERMINATOR Arg",function(){return $1.concat($4)}),s("INDENT ArgList OptComma OUTDENT",function(){return $2}),s("ArgList OptComma INDENT ArgList OptComma OUTDENT",function(){return $1.concat($4)})],Arg:[s("Expression"),s("Splat")],SimpleArgs:[s("Expression"),s("SimpleArgs , Expression",function(){return[].concat($1,$3)})],Try:[s("TRY Block",function(){return new Try($2)}),s("TRY Block Catch",function(){return new Try($2,$3[0],$3[1])}),s("TRY Block FINALLY Block",function(){return new Try($2,null,null,$4)}),s("TRY Block Catch FINALLY Block",function(){return new Try($2,$3[0],$3[1],$5)})],Catch:[s("CATCH Identifier Block",function(){return[$2,$3]})],Throw:[s("THROW Expression",function(){return new Throw($2)})],Parenthetical:[s("( Body )",function(){return new Parens($2)}),s("( INDENT Body OUTDENT )",function(){return new Parens($3)})],WhileSource:[s("WHILE Expression",function(){return new While($2)}),s("WHILE Expression WHEN Expression",function(){return new While($2,{guard:$4})}),s("UNTIL Expression",function(){return new While($2,{invert:!0})}),s("UNTIL Expression WHEN Expression",function(){return new While($2,{invert:!0,guard:$4})})],While:[s("WhileSource Block",function(){return $1.addBody($2)}),s("Statement  WhileSource",function(){return $2.addBody(Block.wrap([$1]))}),s("Expression WhileSource",function(){return $2.addBody(Block.wrap([$1]))}),s("Loop",function(){return $1})],Loop:[s("LOOP Block",function(){return(new While(new Literal("true"))).addBody($2)}),s("LOOP Expression",function(){return(new While(new Literal("true"))).addBody(Block.wrap([$2]))})],For:[s("Statement  ForBody",function(){return new For($1,$2)}),s("Expression ForBody",function(){return new For($1,$2)}),s("ForBody    Block",function(){return new For($2,$1)})],ForBody:[s("FOR Range",function(){return{source:new Value($2)}}),s("ForStart ForSource",function(){$2.own=$1.own;$2.name=$1[0];$2.index=$1[1];return $2})],ForStart:[s("FOR ForVariables",function(){return $2}),s("FOR OWN ForVariables",function(){$3.own=!0;return $3})],ForValue:[s("Identifier"),s("ThisProperty"),s("Array",function(){return new Value($1)}),s("Object",function(){return new Value($1)})],ForVariables:[s("ForValue",function(){return[$1]}),s("ForValue , ForValue",function(){return[$1,$3]})],ForSource:[s("FORIN Expression",function(){return{source:$2}}),s("FOROF Expression",function(){return{source:$2,object:!0}}),s("FORIN Expression WHEN Expression",function(){return{source:$2,guard:$4}}),s("FOROF Expression WHEN Expression",function(){return{source:$2,guard:$4,object:!0}}),s("FORIN Expression BY Expression",function(){return{source:$2,step:$4}}),s("FORIN Expression WHEN Expression BY Expression",function(){return{source:$2,guard:$4,step:$6}}),s("FORIN Expression BY Expression WHEN Expression",function(){return{source:$2,step:$4,guard:$6}})],Switch:[s("SWITCH Expression INDENT Whens OUTDENT",function(){return new Switch($2,$4)}),s("SWITCH Expression INDENT Whens ELSE Block OUTDENT",function(){return new Switch($2,$4,$6)}),s("SWITCH INDENT Whens OUTDENT",function(){return new Switch(null,$3)}),s("SWITCH INDENT Whens ELSE Block OUTDENT",function(){return new Switch(null,$3,$5)})],Whens:[s("When"),s("Whens When",function(){return $1.concat($2)})],When:[s("LEADING_WHEN SimpleArgs Block",function(){return[[$2,$3]]}),s("LEADING_WHEN SimpleArgs Block TERMINATOR",function(){return[[$2,$3]]})],IfBlock:[s("IF Expression Block",function(){return new If($2,$3,{type:$1})}),s("IfBlock ELSE IF Expression Block",function(){return $1.addElse(new If($4,$5,{type:$3}))})],If:[s("IfBlock"),s("IfBlock ELSE Block",function(){return $1.addElse($3)}),s("Statement  POST_IF Expression",function(){return new If($3,Block.wrap([$1]),{type:$2,statement:!0})}),s("Expression POST_IF Expression",function(){return new If($3,Block.wrap([$1]),{type:$2,statement:!0})})],Operation:[s("UNARY Expression",function(){return new Op($1,$2)}),s("-     Expression",function(){return new Op("-",$2)},{prec:"UNARY"}),s("+     Expression",function(){return new Op("+",$2)},{prec:"UNARY"}),s("-- SimpleAssignable",function(){return new Op("--",$2)}),s("++ SimpleAssignable",function(){return new Op("++",$2)}),s("SimpleAssignable --",function(){return new Op("--",$1,null,!0)}),s("SimpleAssignable ++",function(){return new Op("++",$1,null,!0)}),s("Expression ?",function(){return new Existence($1)}),s("Expression +  Expression",function(){return new Op("+",$1,$3)}),s("Expression -  Expression",function(){return new Op("-",$1,$3)}),s("Expression MATH     Expression",function(){return new Op($2,$1,$3)}),s("Expression SHIFT    Expression",function(){return new Op($2,$1,$3)}),s("Expression COMPARE  Expression",function(){return new Op($2,$1,$3)}),s("Expression LOGIC    Expression",function(){return new Op($2,$1,$3)}),s("Expression RELATION Expression",function(){return $2.charAt(0)==="!"?(new Op($2.slice(1),$1,$3)).invert():new Op($2,$1,$3)}),s("SimpleAssignable COMPOUND_ASSIGN       Expression",function(){return new Assign($1,$3,$2)}),s("SimpleAssignable COMPOUND_ASSIGN       INDENT Expression OUTDENT",function(){return new Assign($1,$4,$2)}),s("SimpleAssignable EXTENDS Expression",function(){return new Extends($1,$3)})]};o=[["left",".","?.","::"],["left","CALL_START","CALL_END"],["nonassoc","++","--"],["left","?"],["right","UNARY"],["left","MATH"],["left","+","-"],["left","SHIFT"],["left","RELATION"],["left","COMPARE"],["left","LOGIC"],["nonassoc","INDENT","OUTDENT"],["right","=",":","COMPOUND_ASSIGN","RETURN","THROW","EXTENDS"],["right","FORIN","FOROF","BY","WHEN"],["right","IF","ELSE","FOR","WHILE","UNTIL","LOOP","SUPER","CLASS"],["right","POST_IF"]];a=[];for(i in r){n=r[i];r[i]=function(){var e,s,o,f,l,c;c=[];for(e=0,o=n.length;e<o;e++){t=n[e];l=t[0].split(" ");for(s=0,f=l.length;s<f;s++){u=l[s];r[u]||a.push(u)}i==="Root"&&(t[1]="return "+t[1]);c.push(t)}return c}()}exports.parser=new e({tokens:a.join(" "),bnf:r,operators:o.reverse(),startSymbol:"Root"})}).call(this);