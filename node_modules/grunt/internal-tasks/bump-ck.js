/*
 * grunt-contrib-bump
 * http://gruntjs.com/
 *
 * Copyright (c) 2014 "Cowboy" Ben Alman, contributors
 * Licensed under the MIT license.
 */"use strict";var semver=require("semver"),shell=require("shelljs");module.exports=function(e){function t(t,n){return e.template.process(t,{delimiters:"bump",data:n})}function n(t,n){e.log.writeln("Committing "+t.join(", ")+" with message: "+n);i("git commit -m '"+n+"' '"+t.join("' '")+"'")}function r(t,n){e.log.writeln("Tagging "+t+" with message: "+n);i("git tag '"+t+"' -m '"+n+"'")}function i(t){if(e.option("no-write"))e.verbose.writeln("Not actually running: "+t);else{e.verbose.writeln("Running: "+t);var n=shell.exec(t,{silent:!0});n.code!==0&&e.log.error("Error ("+n.code+") "+n.output)}}e.registerTask("bump","Bump the version property of a JSON file.",function(){var i=["major","minor","patch","prerelease"],s=[];this.args.forEach(function(t){var n=[];i.forEach(function(e){e.indexOf(t)===0&&n.push(e)});n.length===0?e.log.error('Error: mode "'+t+'" does not match any known modes.'):n.length>1?e.log.error('Error: mode "'+t+'" is ambiguous (possibly: '+n.join(", ")+")."):s.push(n[0])});this.errorCount===0&&s.length===0&&e.log.error("Error: no modes specified.");if(this.errorCount>0){e.log.error("Valid modes are: "+i.join(", ")+".");throw new Error("Use valid modes (or unambiguous mode abbreviations).")}var o=this.options({filepaths:["package.json"],syncVersions:!1,commit:!0,commitMessage:"Bumping version to {%= version %}.",tag:!0,tagName:"v{%= version %}",tagMessage:"Version {%= version %}",tagPrerelease:!1}),u=Array.isArray(o.filepaths)?o.filepaths:[o.filepaths],a={};u.forEach(function(t){var n=e.file.readJSON(t),r=n.version,i=Object.keys(a)[0];o.syncVersions&&i&&(n.version=i);s.forEach(function(e){var t=n.version,r=semver.parse(n.version);r.inc(e);n.version=String(r);/-/.test(t)&&e==="patch"&&(n.version=n.version.replace(/\d+$/,function(e){return e-1}));if(!/-/.test(t)&&e==="prerelease"){r.inc("patch");r.inc("prerelease");n.version=String(r)}});a[r]?a[r].filepaths.push(t):a[r]={version:n.version,filepaths:[t]};e.log.write("Bumping version in "+t+" from "+r+" to "+n.version+"...");e.file.write(t,JSON.stringify(n,null,2));e.log.ok()});o.commit&&Object.keys(a).forEach(function(e){var r=a[e];n(r.filepaths,t(o.commitMessage,{version:r.version,origVersion:e}))});var f=a[Object.keys(a)[0]].version;o.tag&&(o.tagPrerelease||s.indexOf("prerelease")===-1?r(t(o.tagName,{version:f}),t(o.tagMessage,{version:f})):e.log.writeln("Not tagging (prerelease version)."));this.errorCount>0&&e.warn("There were errors.")});e.template.addDelimiters("bump","{%","%}")};